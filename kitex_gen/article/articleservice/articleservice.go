// Code generated by Kitex v0.7.3. DO NOT EDIT.

package articleservice

import (
	"context"
	article "github.com/Yra-A/Fusion_Go/kitex_gen/article"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return articleServiceServiceInfo
}

var articleServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "ArticleService"
	handlerType := (*article.ArticleService)(nil)
	methods := map[string]kitex.MethodInfo{
		"ArticleList": kitex.NewMethodInfo(articleListHandler, newArticleServiceArticleListArgs, newArticleServiceArticleListResult, false),
	}
	extra := map[string]interface{}{
		"PackageName":     "article",
		"ServiceFilePath": `idl/article.thrift`,
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.7.3",
		Extra:           extra,
	}
	return svcInfo
}

func articleListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*article.ArticleServiceArticleListArgs)
	realResult := result.(*article.ArticleServiceArticleListResult)
	success, err := handler.(article.ArticleService).ArticleList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newArticleServiceArticleListArgs() interface{} {
	return article.NewArticleServiceArticleListArgs()
}

func newArticleServiceArticleListResult() interface{} {
	return article.NewArticleServiceArticleListResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) ArticleList(ctx context.Context, req *article.ArticleListRequest) (r *article.ArticleListResponse, err error) {
	var _args article.ArticleServiceArticleListArgs
	_args.Req = req
	var _result article.ArticleServiceArticleListResult
	if err = p.c.Call(ctx, "ArticleList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
