// Code generated by Kitex v0.7.3. DO NOT EDIT.

package favoriteservice

import (
	"context"
	favorite "github.com/Yra-A/Fusion_Go/kitex_gen/favorite"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return favoriteServiceServiceInfo
}

var favoriteServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "FavoriteService"
	handlerType := (*favorite.FavoriteService)(nil)
	methods := map[string]kitex.MethodInfo{
		"ContestFavoriteAction":       kitex.NewMethodInfo(contestFavoriteActionHandler, newFavoriteServiceContestFavoriteActionArgs, newFavoriteServiceContestFavoriteActionResult, false),
		"ContestFavoriteList":         kitex.NewMethodInfo(contestFavoriteListHandler, newFavoriteServiceContestFavoriteListArgs, newFavoriteServiceContestFavoriteListResult, false),
		"QueryFavoriteStatusByUserId": kitex.NewMethodInfo(queryFavoriteStatusByUserIdHandler, newFavoriteServiceQueryFavoriteStatusByUserIdArgs, newFavoriteServiceQueryFavoriteStatusByUserIdResult, false),
	}
	extra := map[string]interface{}{
		"PackageName":     "favorite",
		"ServiceFilePath": `idl/favorite.thrift`,
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.7.3",
		Extra:           extra,
	}
	return svcInfo
}

func contestFavoriteActionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*favorite.FavoriteServiceContestFavoriteActionArgs)
	realResult := result.(*favorite.FavoriteServiceContestFavoriteActionResult)
	success, err := handler.(favorite.FavoriteService).ContestFavoriteAction(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFavoriteServiceContestFavoriteActionArgs() interface{} {
	return favorite.NewFavoriteServiceContestFavoriteActionArgs()
}

func newFavoriteServiceContestFavoriteActionResult() interface{} {
	return favorite.NewFavoriteServiceContestFavoriteActionResult()
}

func contestFavoriteListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*favorite.FavoriteServiceContestFavoriteListArgs)
	realResult := result.(*favorite.FavoriteServiceContestFavoriteListResult)
	success, err := handler.(favorite.FavoriteService).ContestFavoriteList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFavoriteServiceContestFavoriteListArgs() interface{} {
	return favorite.NewFavoriteServiceContestFavoriteListArgs()
}

func newFavoriteServiceContestFavoriteListResult() interface{} {
	return favorite.NewFavoriteServiceContestFavoriteListResult()
}

func queryFavoriteStatusByUserIdHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*favorite.FavoriteServiceQueryFavoriteStatusByUserIdArgs)
	realResult := result.(*favorite.FavoriteServiceQueryFavoriteStatusByUserIdResult)
	success, err := handler.(favorite.FavoriteService).QueryFavoriteStatusByUserId(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFavoriteServiceQueryFavoriteStatusByUserIdArgs() interface{} {
	return favorite.NewFavoriteServiceQueryFavoriteStatusByUserIdArgs()
}

func newFavoriteServiceQueryFavoriteStatusByUserIdResult() interface{} {
	return favorite.NewFavoriteServiceQueryFavoriteStatusByUserIdResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) ContestFavoriteAction(ctx context.Context, req *favorite.ContestFavoriteActionRequest) (r *favorite.ContestFavoriteActionResponse, err error) {
	var _args favorite.FavoriteServiceContestFavoriteActionArgs
	_args.Req = req
	var _result favorite.FavoriteServiceContestFavoriteActionResult
	if err = p.c.Call(ctx, "ContestFavoriteAction", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ContestFavoriteList(ctx context.Context, req *favorite.ContestFavoriteListRequest) (r *favorite.ContestFavoriteListResponse, err error) {
	var _args favorite.FavoriteServiceContestFavoriteListArgs
	_args.Req = req
	var _result favorite.FavoriteServiceContestFavoriteListResult
	if err = p.c.Call(ctx, "ContestFavoriteList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) QueryFavoriteStatusByUserId(ctx context.Context, req *favorite.QueryFavoriteStatusByUserIdRequest) (r *favorite.QueryFavoriteStatusByUserIdResponse, err error) {
	var _args favorite.FavoriteServiceQueryFavoriteStatusByUserIdArgs
	_args.Req = req
	var _result favorite.FavoriteServiceQueryFavoriteStatusByUserIdResult
	if err = p.c.Call(ctx, "QueryFavoriteStatusByUserId", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
