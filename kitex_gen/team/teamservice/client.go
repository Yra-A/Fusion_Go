// Code generated by Kitex v0.6.2. DO NOT EDIT.

package teamservice

import (
	"context"
	team "github.com/Yra-A/Fusion_Go/kitex_gen/team"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	TeamCreate(ctx context.Context, req *team.TeamCreateRequest, callOptions ...callopt.Option) (r *team.TeamCreateResponse, err error)
	TeamList(ctx context.Context, req *team.TeamListRequest, callOptions ...callopt.Option) (r *team.TeamListResponse, err error)
	TeamInfo(ctx context.Context, req *team.TeamInfoRequest, callOptions ...callopt.Option) (r *team.TeamInfoResponse, err error)
	TeamApplicationSubmit(ctx context.Context, req *team.TeamApplicationSubmitRequest, callOptions ...callopt.Option) (r *team.TeamApplicationSubmitResponse, err error)
	TeamManageList(ctx context.Context, req *team.TeamManageListRequest, callOptions ...callopt.Option) (r *team.TeamManageListResponse, err error)
	TeamManageAction(ctx context.Context, req *team.TeamManageActionRequest, callOptions ...callopt.Option) (r *team.TeamManageActionResponse, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kTeamServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kTeamServiceClient struct {
	*kClient
}

func (p *kTeamServiceClient) TeamCreate(ctx context.Context, req *team.TeamCreateRequest, callOptions ...callopt.Option) (r *team.TeamCreateResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.TeamCreate(ctx, req)
}

func (p *kTeamServiceClient) TeamList(ctx context.Context, req *team.TeamListRequest, callOptions ...callopt.Option) (r *team.TeamListResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.TeamList(ctx, req)
}

func (p *kTeamServiceClient) TeamInfo(ctx context.Context, req *team.TeamInfoRequest, callOptions ...callopt.Option) (r *team.TeamInfoResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.TeamInfo(ctx, req)
}

func (p *kTeamServiceClient) TeamApplicationSubmit(ctx context.Context, req *team.TeamApplicationSubmitRequest, callOptions ...callopt.Option) (r *team.TeamApplicationSubmitResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.TeamApplicationSubmit(ctx, req)
}

func (p *kTeamServiceClient) TeamManageList(ctx context.Context, req *team.TeamManageListRequest, callOptions ...callopt.Option) (r *team.TeamManageListResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.TeamManageList(ctx, req)
}

func (p *kTeamServiceClient) TeamManageAction(ctx context.Context, req *team.TeamManageActionRequest, callOptions ...callopt.Option) (r *team.TeamManageActionResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.TeamManageAction(ctx, req)
}
